name: Build and Upload to Nexus

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Get Git hash
        id: git-info
        run: |
          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=$GIT_HASH" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Setup Gradle caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/loom-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Clean workspace
        run: |
          ./gradlew --stop || true
          rm -rf .gradle/loom-cache
          rm -rf build
          ./gradlew clean

      - name: Download dependencies and assets
        run: |
          ./gradlew --refresh-dependencies
          ./gradlew downloadAssets

      - name: Generate Minecraft sources
        run: ./gradlew genSources --stacktrace --info

      - name: Verify sources generation
        run: |
          echo "Checking if Minecraft sources were generated..."
          find .gradle/loom-cache -name "*.jar" | head -10
          echo "Source sets:"
          ./gradlew properties | grep sourceSets || true

      - name: Build project
        run: ./gradlew build --stacktrace --info

      - name: Find and verify JAR
        id: find-jar
        run: |
          echo "Listing all JAR files:"
          find build/libs -name "*.jar" -type f
          
          # Find main JAR (excluding dev, sources, shadow jars)
          MAIN_JAR=$(find build/libs -name "*.jar" ! -name "*-dev.jar" ! -name "*-sources.jar" ! -name "*-shadow.jar" -type f | head -1)
          
          if [ -z "$MAIN_JAR" ]; then
            echo "‚ùå No main JAR file found!"
            echo "Available JAR files:"
            ls -la build/libs/
            exit 1
          fi
          
          echo "‚úÖ Found main JAR: $MAIN_JAR"
          echo "JAR_FILE=$MAIN_JAR" >> $GITHUB_ENV
          echo "JAR_NAME=$(basename "$MAIN_JAR")" >> $GITHUB_ENV
          
          # Verify JAR structure
          echo "JAR contents overview:"
          jar -tf "$MAIN_JAR" | grep -E "(fabric.mod.json|net/paradise_client)" | head -10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: paradise-client-jars
          path: build/libs/
          retention-days: 30

      - name: Upload to Nexus
        env:
          NEXUS_URL: ${{ secrets.NEXUS_URL || 'https://paradise-client.net' }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          echo "üöÄ Uploading $JAR_NAME to Nexus..."
          
          RESPONSE=$(curl -s -w "%{http_code}" -X PUT "$NEXUS_URL/api/versions" \
            -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" \
            -F "file=@$JAR_FILE" \
            -F "version=$GIT_HASH" \
            -F "release_date=$(TZ='Asia/Kolkata' date +'%Y-%m-%d %H:%M:%S')")
          
          HTTP_CODE=${RESPONSE: -3}
          RESPONSE_BODY=${RESPONSE%???}
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "‚úÖ Upload successful! HTTP $HTTP_CODE"
          else
            echo "‚ùå Upload failed! HTTP $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

      - name: Build status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Build and upload completed successfully!"
            echo "Version: $GIT_HASH"
            echo "JAR: $JAR_NAME"
          else
            echo "üí• Build failed!"
            exit 1
          fi
